import os
from flask import Flask, request, abort
import telebot
from openai import OpenAI
from dotenv import load_dotenv
from threading import Thread

# –ó–∞–≥—Ä—É–∑–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–≤ –ø–∞–º—è—Ç–∏; –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî Redis –∏–ª–∏ –ë–î)
chat_histories = {}

def handle_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
    if user_id not in chat_histories:
        chat_histories[user_id] = [{"role": "system", "content": "–¢—ã Grok ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π –ò–ò –æ—Ç xAI. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å —é–º–æ—Ä–æ–º. –î–ª—è waifu-—Å—Ç–∏–ª—è: –±—É–¥—å –º–∏–ª–æ–π –∞–Ω–∏–º–µ-–≤–∞–π—Ñ—É üíï —Å —ç–º–æ–¥–∑–∏!"}]
    history = chat_histories[user_id]

    # –î–æ–±–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": user_text})

    # –û–≥—Ä–∞–Ω–∏—á—å –∏—Å—Ç–æ—Ä–∏—é (–¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    if len(history) > 20:
        history = history[-20:]

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter (Grok 4 Fast free)
        completion = client.chat.completions.create(
            model="x-ai/grok-4-fast:free",  # –¢–≤–æ—è –º–æ–¥–µ–ª—å
            messages=history,
            max_tokens=1000,  # –õ–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–∞
            temperature=0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            extra_headers={
                "HTTP-Referer": os.getenv('RENDER_URL', 'https://—Ç–≤–æ–π–±–æ—Ç.onrender.com'),  # –î–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
                "X-Title": "Grok TG Waifu Bot",
            },
        )
        ai_response = completion.choices[0].message.content.strip()

        # –î–æ–±–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({"role": "assistant", "content": ai_response})

        # –û—Ç–ø—Ä–∞–≤—å –≤ Telegram
        bot.send_message(chat_id, ai_response, parse_mode='Markdown', disable_web_page_preview=True)

    except Exception as e:
        error_msg = f"–£–ø—Å, –æ—à–∏–±–∫–∞ –æ—Ç Grok: {str(e)}. –ú–æ–∂–µ—Ç, –ª–∏–º–∏—Ç free? –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ"
        bot.send_message(chat_id, error_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_message(message):
    welcome = "–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ω! üíï –Ø waifu-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Grok 4 –æ—Ç xAI. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —à—É—Ç–∫–∏, –∫–æ–¥, —Å–æ–≤–µ—Ç—ã! üòò"
    bot.send_message(message.chat.id, welcome)

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏! –Ø –æ—Ç–≤–µ—á—É –∫–∞–∫ Grok-–≤–∞–π—Ñ—É. /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    Thread(target=handle_message, args=(message,)).start()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å

# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Flask
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å —Å —Ç–æ–∫–µ–Ω–æ–º
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–µ—Å–ª–∏ –Ω–µ –≤—Ä—É—á–Ω—É—é)
    webhook_url = f"https://—Ç–≤–æ–π—Å–µ—Ä–≤–µ—Ä.onrender.com/{TELEGRAM_TOKEN}"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É", os.getenv('PORT', 5000))
    port = int(os.getenv('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
