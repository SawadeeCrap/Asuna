import os
import logging
import uuid
import requests
from flask import Flask, request, abort
import telebot
from dotenv import load_dotenv
from threading import Thread
from qdrant_client import QdrantClient
from qdrant_client.models import VectorParams, Distance, PointStruct

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- –¢–û–ö–ï–ù–´ ----------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
RENDER_URL = os.getenv("RENDER_URL", "https://example.onrender.com")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY or not QDRANT_API_KEY or not QDRANT_URL:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∫–ª—é—á–∏/URL!")

# ---------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ----------------
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)
qdrant = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

# ---------------- –ö–û–õ–õ–ï–ö–¶–ò–Ø ----------------
collection_name = "knowledge_base"
try:
    qdrant.get_collection(collection_name=collection_name)
    logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
except Exception:
    qdrant.recreate_collection(
        collection_name=collection_name,
        vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
    )
    logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —Å–æ–∑–¥–∞–Ω–∞")

# ---------------- –ü–ê–ú–Ø–¢–¨ –ß–ê–¢–ê ----------------
chat_history = {}  # chat_id -> [{"role":"user"/"assistant", "content": "..."}]
MAX_HISTORY = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

# ---------------- –§–£–ù–ö–¶–ò–ò ----------------
def embed_text(text: str) -> list:
    """–ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ OpenRouter —Å –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    if not text.strip():
        logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
        return [0.0]*1536

    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/embeddings",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "openai/text-embedding-3-small",
                "input": text
            },
            timeout=30
        )
        logger.info(f"Raw response from OpenRouter: {resp.text}")  # <-- –ø–µ—á–∞—Ç–∞–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ
        resp.raise_for_status()
        data = resp.json()
        embedding = data["data"][0]["embedding"]
        logger.info(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(embedding)}")
        return embedding
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: {e}")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e} | Response: {getattr(resp, 'text', '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {e} | Response: {resp.text}")
    
    return [0.0]*1536

def add_doc(doc: str):
    vector = embed_text(doc)
    qdrant.upsert(
        collection_name=collection_name,
        points=[PointStruct(id=str(uuid.uuid4()), vector=vector, payload={"text": doc})]
    )
    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: {doc}")

def search_docs(query: str, top_k=3):
    vector = embed_text(query)
    results = qdrant.search(collection_name=collection_name, query_vector=vector, limit=top_k)
    found = [r.payload["text"] for r in results]
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}' –≤–µ—Ä–Ω—É–ª: {found}")
    return found

def handle_message(message):
    chat_id = message.chat.id
    user_text = message.text.strip()
    if not user_text:
        return

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {user_text}")

    # –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑—É
    if not user_text.startswith("/"):
        add_doc(user_text)

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
    retrieved = search_docs(user_text)
    retrieved_context = "\n".join(retrieved) if retrieved else "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    history = chat_history.get(chat_id, [])
    history_messages = history[-MAX_HISTORY:]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç LLM
    messages = [
        {"role": "system", "content": "–¢—ã Asuna Cat ‚Äî –≤–µ—Å–µ–ª–∞—è –∫–æ—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã."},
        {"role": "system", "content": f"–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–∞—à–ª–æ—Å—å:\n{retrieved_context}"},
    ] + history_messages + [{"role": "user", "content": user_text}]

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
            },
            json={
                "model": "openai/gpt-3.5-turbo",
                "messages": messages,
                "max_tokens": 800,
                "temperature": 0.7
            },
            timeout=20
        )
        response.raise_for_status()
        ai_response = response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: {e}")
        ai_response = "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç üòÖ"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    bot.send_message(chat_id, ai_response, parse_mode="Markdown", disable_web_page_preview=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    history.append({"role": "user", "content": user_text})
    history.append({"role": "assistant", "content": ai_response})
    chat_history[chat_id] = history[-MAX_HISTORY:]

# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
@bot.message_handler(commands=["start"])
def start_message(message):
    bot.send_message(message.chat.id, "SKYNET BOT ACTIVATE! üòò")

@bot.message_handler(commands=["help"])
def help_message(message):
    bot.send_message(message.chat.id, "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/add —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n/search —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ")

@bot.message_handler(commands=["add"])
def add_document(message):
    text = message.text.replace("/add", "").strip()
    if text:
        add_doc(text)
        bot.send_message(message.chat.id, "–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /add")

@bot.message_handler(commands=["search"])
def search_document(message):
    query = message.text.replace("/search", "").strip()
    if not query:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /search")
        return
    retrieved = search_docs(query)
    if retrieved:
        result_text = "\n\n".join(f"{i+1}. {doc}" for i, doc in enumerate(retrieved))
        bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{result_text}")
    else:
        bot.send_message(message.chat.id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòÖ")

# ---------------- –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ----------------
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    Thread(target=handle_message, args=(message,)).start()

# ---------------- FLASK WEBHOOK ----------------
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([update])
        return ""
    else:
        abort(403)

# ---------------- MAIN ----------------
if __name__ == "__main__":
    webhook_url = f"{RENDER_URL}/{TELEGRAM_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
