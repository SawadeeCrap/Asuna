import os
import logging
import uuid
import requests
from flask import Flask, request, abort
import telebot
from dotenv import load_dotenv
from threading import Thread
from qdrant_client import QdrantClient
from qdrant_client.models import VectorParams, Distance, PointStruct, Filter

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- –¢–û–ö–ï–ù–´ ----------------
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
QDRANT_URL = os.getenv("QDRANT_URL")
RENDER_URL = os.getenv("RENDER_URL", "https://example.onrender.com")

if not TELEGRAM_TOKEN or not OPENROUTER_API_KEY or not QDRANT_API_KEY or not QDRANT_URL:
    raise ValueError("–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –∑–∞–¥–∞–Ω—ã!")

# ---------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ----------------
app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)
qdrant = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
try:
    qdrant.recreate_collection(
        collection_name="knowledge_base",
        vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
    )
    logger.info("Qdrant collection recreated")
except Exception:
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞")

# ---------------- –§–£–ù–ö–¶–ò–ò ----------------
def embed_text(text: str) -> list:
    """–≠–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ OpenRouter Free"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/embeddings",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={"model": "openai/text-embedding-3-small", "input": text},
            timeout=15
        )
        resp.raise_for_status()
        data = resp.json()
        embedding = data["data"][0]["embedding"]
        logger.info(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è '{text[:30]}...': OK")
        return embedding
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ OpenRouter: {e} | Response: {getattr(resp, 'text', '')}")
        return [0.0] * 1536

def add_doc(doc: str):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ Qdrant"""
    vector = embed_text(doc)
    qdrant.upsert(
        collection_name="knowledge_base",
        points=[PointStruct(id=str(uuid.uuid4()), vector=vector, payload={"text": doc})]
    )
    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: {doc[:50]}...")

def search_docs(query: str, top_k=3):
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    vector = embed_text(query)
    try:
        results = qdrant.query_points(
            collection_name="knowledge_base",
            query_vector=vector,
            limit=top_k
        )
        docs = [r.payload["text"] for r in results.result]
        logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–ª—è '{query[:30]}...' –≤–µ—Ä–Ω—É–ª: {docs}")
        return docs
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Qdrant: {e}")
        return []

def call_openrouter_chat(messages):
    """–ó–∞–ø—Ä–æ—Å –∫ OpenRouter Free"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": RENDER_URL,
                "X-Title": "Asuna TG Bot",
            },
            json={
                "model": "x-ai/grok-4-fast:free",
                "messages": messages,
                "max_tokens": 800,
                "temperature": 0.7
            },
            timeout=20
        )
        resp.raise_for_status()
        return resp.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter Chat: {e}")
        return "–£–ø—Å, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç üòÖ"

def handle_message(message):
    user_text = message.text
    chat_id = message.chat.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {user_text}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
    add_doc(user_text)

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ
    retrieved = search_docs(user_text)
    context = "\n".join(retrieved) if retrieved else "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
    messages = [
        {"role": "system", "content": "–¢—ã Asuna Cat ‚Äî –≤–µ—Å–µ–ª–∞—è –∫–æ—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–µ–∫–¥–æ—Ç—ã."},
        {"role": "system", "content": f"–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–∞—à–ª–æ—Å—å:\n{context}"},
        {"role": "user", "content": user_text}
    ]

    # –û—Ç–≤–µ—Ç LLM
    ai_response = call_openrouter_chat(messages)
    bot.send_message(chat_id, ai_response, parse_mode="Markdown", disable_web_page_preview=True)

# ---------------- TELEGRAM –•–ï–ù–î–õ–ï–†–´ ----------------
@bot.message_handler(commands=["start"])
def start_message(message):
    bot.send_message(message.chat.id, "SKYNET BOT ACTIVATE! üòò")

@bot.message_handler(commands=["help"])
def help_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî –±–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –∏—â–µ—Ç –≤ –±–∞–∑–µ.")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    Thread(target=handle_message, args=(message,)).start()

# ---------------- FLASK WEBHOOK ----------------
@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    if request.headers.get("content-type") == "application/json":
        json_string = request.get_data().decode("utf-8")
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ""
    else:
        abort(403)

# ---------------- MAIN ----------------
if __name__ == "__main__":
    webhook_url = f"{RENDER_URL}/{TELEGRAM_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook set: {webhook_url}")
    port = int(os.getenv("PORT", 10000))
    app.run(host="0.0.0.0", port=port, debug=False)
