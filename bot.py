import os
import logging
import threading
import uuid
from flask import Flask, request
import telebot
from openai import OpenAI
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct, Distance, VectorParams
import requests

# ----------------- –õ–æ–≥–∏ -----------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –¥–ª—è Grok
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
RENDER_URL = os.getenv("RENDER_URL", "https://asuna-3bfa.onrender.com")  # URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
PORT = int(os.getenv("PORT", 5000))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
required_tokens = {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "QDRANT_URL": QDRANT_URL,
    "RENDER_URL": RENDER_URL
}

for name, token in required_tokens.items():
    if not token:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {name}")
        exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)
app = Flask(__name__)

# ----------------- –ö–ª–∏–µ–Ω—Ç—ã -----------------
openai_client = OpenAI(api_key=OPENAI_API_KEY)
qdrant = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY)

COLLECTION_NAME = "knowledge_base"
CONTEXT_COLLECTION = "user_contexts"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
user_contexts = {}

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ -----------------
def create_embedding(text: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ OpenAI"""
    try:
        response = openai_client.embeddings.create(
            model="text-embedding-3-small",
            input=text.strip()
        )
        return response.data[0].embedding
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return None

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Qdrant -----------------
def init_collections():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ Qdrant"""
    try:
        collections = qdrant.get_collections()
        existing_collections = [col.name for col in collections.collections]
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        if COLLECTION_NAME not in existing_collections:
            qdrant.create_collection(
                collection_name=COLLECTION_NAME,
                vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
            )
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME}")
        else:
            logging.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e}")

def add_to_knowledge_base(text: str, source: str = "user"):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É"""
    try:
        vector = create_embedding(text)
        if not vector:
            return False
            
        point_id = str(uuid.uuid4())
        point = PointStruct(
            id=point_id,
            vector=vector,
            payload={
                "text": text,
                "source": source,
                "id": point_id
            }
        )
        
        qdrant.upsert(collection_name=COLLECTION_NAME, points=[point])
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞–Ω–∏–µ: {text[:50]}...")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def search_knowledge(query: str, threshold: float = 0.7, limit: int = 5):
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    try:
        vector = create_embedding(query)
        if not vector:
            return []
            
        results = qdrant.query_points(
            collection_name=COLLECTION_NAME,
            query=vector,
            limit=limit,
            score_threshold=threshold  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –æ—Ö–≤–∞—Ç–∞
        ).points
        
        if results:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            return [point.payload["text"] for point in results]
        else:
            logging.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è: {query}")
            return []
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        return []

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è OpenRouter (Grok) -----------------
def ask_grok(question: str, context: list = None, user_context: list = None):
    """–ó–∞–ø—Ä–æ—Å –∫ Grok —á–µ—Ä–µ–∑ OpenRouter"""
    try:
        messages = []
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        if context:
            system_prompt = f"""–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. 

–í–ê–ñ–ù–û: –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
{chr(10).join(context)}

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ - –æ–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–µ—ë, –Ω–æ –æ—Ç–≤–µ—á–∞–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–æ–ø–æ–ª–Ω—è–π –∏ –æ–±—ä—è—Å–Ω—è–π.

–ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –æ—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π.

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ."""
        else:
            system_prompt = """–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π."""

        messages.append({"role": "system", "content": system_prompt})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if user_context:
            for msg in user_context[-6:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                messages.append(msg)
        
        # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": question})
        
        # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "x-ai/grok-4-fast:free",  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Grok
                "messages": messages,
                "temperature": 0.7,  # –ü–æ–≤—ã—à–µ–Ω–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
                "max_tokens": 800    # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            }
        )
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            logging.error(f"–û—à–∏–±–∫–∞ OpenRouter: {response.status_code} - {response.text}")
            return "–ò–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Grok: {e}")
        return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

# ----------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π -----------------
def add_to_user_context(user_id: int, message: str, is_bot: bool = False):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    
    role = "assistant" if is_bot else "user"
    user_contexts[user_id].append({"role": role, "content": message})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(user_contexts[user_id]) > 10:
        user_contexts[user_id] = user_contexts[user_id][-10:]

def get_user_context(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_contexts.get(user_id, [])

# ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ -----------------
@bot.message_handler(commands=['start'])
def handle_start(message):
    welcome_text = """ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ-—Ç–æ"
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

üß† –ï—Å–ª–∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ - —è –µ—ë –∏—Å–ø–æ–ª—å–∑—É—é, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–≤–µ—á–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π!"""
    
    bot.reply_to(message, welcome_text)
    add_to_user_context(message.from_user.id, message.text)
    add_to_user_context(message.from_user.id, welcome_text, is_bot=True)

@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = """üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:**
   –ù–∞–ø–∏—à–∏: "–∑–∞–ø–æ–º–Ω–∏ Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"

2. **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:**
   –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏: "—á—Ç–æ —Ç–∞–∫–æ–µ Python?"

3. **–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
   –ö–æ–º–∞–Ω–¥–∞ /clear

üß† **–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:**
- –ï—Å–ª–∏ –≤ –º–æ–µ–π –±–∞–∑–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É - —è –∏—Å–ø–æ–ª—å–∑—É—é –µ—ë
- –ï—Å–ª–∏ –Ω–µ—Ç - –æ—Ç–≤–µ—á–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏–π
- –í—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç!"""
    
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['clear'])
def handle_clear(message):
    user_id = message.from_user.id
    if user_id in user_contexts:
        del user_contexts[user_id]
    bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω")

# ----------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π -----------------
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        user_id = message.from_user.id
        user_text = message.text.strip()
        
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        add_to_user_context(user_id, user_text)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if user_text.lower().startswith("–∑–∞–ø–æ–º–Ω–∏ "):
            knowledge = user_text[8:].strip()  # —É–±–∏—Ä–∞–µ–º "–∑–∞–ø–æ–º–Ω–∏ "
            if knowledge:
                success = add_to_knowledge_base(knowledge)
                if success:
                    response = f"‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª: {knowledge}"
                else:
                    response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            else:
                response = "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏: –∑–∞–ø–æ–º–Ω–∏ —á—Ç–æ-—Ç–æ"
        else:
            # –û–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            knowledge_results = search_knowledge(user_text)
            user_context_data = get_user_context(user_id)
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ Grok, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            response = ask_grok(user_text, knowledge_results, user_context_data)
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
            if knowledge_results:
                logging.info(f"–û—Ç–≤–µ—Ç –¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {len(knowledge_results)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        add_to_user_context(user_id, response, is_bot=True)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.reply_to(message, "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# ----------------- Flask –º–∞—Ä—à—Ä—É—Ç—ã -----------------
@app.route("/", methods=["GET"])
def home():
    return "ü§ñ Knowledge Bot is running!", 200

@app.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    try:
        json_data = request.get_json()
        if json_data:
            logging.info("–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Telegram")
            update = telebot.types.Update.de_json(json_data)
            threading.Thread(target=bot.process_new_updates, args=([update],)).start()
        return "", 200
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return "", 500

def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = f"{RENDER_URL}/{TELEGRAM_TOKEN}"
        result = bot.set_webhook(url=webhook_url)
        if result:
            logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logging.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

# ----------------- –ó–∞–ø—É—Å–∫ -----------------
if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Knowledge Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_collections()
    set_webhook()
    
    logging.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    logging.info(f"üì° Webhook: {RENDER_URL}/{TELEGRAM_TOKEN}")
    
    # –ó–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=PORT, debug=False)
