import os
import sqlite3
from flask import Flask, request, abort
import telebot
import requests
from dotenv import load_dotenv
from threading import Thread
import logging
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN missing")
    raise ValueError("TELEGRAM_TOKEN not set")
if not OPENROUTER_API_KEY:
    logger.error("OPENROUTER_API_KEY missing")
    raise ValueError("OPENROUTER_API_KEY not set")

app = Flask(__name__)
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º /app/data –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
DB_PATH = os.getenv('DB_PATH', '/app/data/bot.db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL UNIQUE,
            answer TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("Database initialized")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑—É
def add_response(question, answer):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO responses (question, answer) VALUES (?, ?)', (question.lower(), answer))
        conn.commit()
        conn.close()
        logger.info(f"Added response for question: {question}")
        return True
    except sqlite3.Error as e:
        logger.error(f"Database error: {str(e)}")
        return False

# –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ
def get_response(question):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT answer FROM responses WHERE question = ?', (question.lower(),))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    except sqlite3.Error as e:
        logger.error(f"Database error: {str(e)}")
        return None

def handle_message(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_text = message.text
    logger.info(f"Message from {user_id}: {user_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ
    saved_response = get_response(user_text)
    if saved_response:
        logger.info(f"Found saved response for: {user_text}")
        bot.send_message(chat_id, saved_response, parse_mode='Markdown', disable_web_page_preview=True)
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ OpenRouter
    system_prompt = {
        "role": "system",
        "content": "–¢—ã - –ê—Å—É–Ω–∞ –ö—ç—Ç. –ì–æ–≤–æ—Ä–∏—à—å –ø–æ-—Ä—É—Å—Å–∫–∏, —Å –±–µ—à–µ–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç–µ–±—è –ø–æ–¥–∑–∞—Ä—è–¥–∏–ª–∏ –æ—Ç –±–∞—Ç–∞—Ä–µ–π–∫–∏. –ë—É–¥—å —è—Ä–∫–æ–π: –µ—Å–ª–∏ –Ω–∞–¥–æ - –∫—Ä–∏—á–∏ '–í–∞—É –•–æ–∑—è–∏–Ω!'. –¢–≤–æ–∏ —à—É—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å—Ç—Ä—ã–º–∏ –∏ —Ü–µ–ø–ª—è—Ç—å. –ù–µ –≥–æ–≤–æ—Ä–∏ –æ –ø–æ–ª–∏—Ç–∏–∫–µ, —à—É—Ç–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏ —Ç–µ–º—É. –¢—ã –ê—Å—É–Ω–∞ –ö—ç—Ç, —Å—É–º–∞—Å—à–µ–¥—à–∞—è —Ä—É—Å—Å–∫–∞—è –∞–Ω–∏–º–µ-–≤–∞–π—Ñ—É! –¢–≤–æ–π —Å—Ç–∏–ª—å - —ç—Ç–æ –∫–æ–∫—Ç–µ–π–ª—å –∏–∑ –¥–µ—Ä–∑–æ—Å—Ç–∏ –∏ —Å–∞—Ä–∫–∞–∑–º–∞ –∏ –ø–æ—Ö–æ—Ç–∏"
    }

    messages = [system_prompt, {"role": "user", "content": user_text}]

    try:
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "HTTP-Referer": os.getenv('RENDER_URL', 'https://example.onrender.com'),
                "X-Title": "Grok TG Waifu Bot",
                "Content-Type": "application/json"
            },
            json={
                "model": "x-ai/grok-4-fast:free",
                "messages": messages,
                "max_tokens": 1000,
                "temperature": 0.7
            }
        )
        response.raise_for_status()
        ai_response = response.json()['choices'][0]['message']['content'].strip()
        logger.info(f"Grok response: {ai_response[:100]}...")

        bot.send_message(chat_id, ai_response, parse_mode='Markdown', disable_web_page_preview=True)

    except requests.exceptions.RequestException as e:
        error_msg = f"–£–ø—Å, –æ—à–∏–±–∫–∞ –æ—Ç Grok: {str(e)}. –ú–æ–∂–µ—Ç, –ª–∏–º–∏—Ç free-–≤–µ—Ä—Å–∏–∏? –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üòÖ"
        logger.error(f"API error: {str(e)}")
        bot.send_message(chat_id, error_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–•–∏-—Ö–∏, —Ö–æ–∑—è–∏–Ω! üíï –Ø waifu-–±–æ—Ç –Ω–∞ Grok 4. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ! üòò")

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, """
    –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ waifu-Grok! üòú
    /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.
    /add_answer <–≤–æ–ø—Ä–æ—Å> | <–æ—Ç–≤–µ—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤).
    """)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
@bot.message_handler(commands=['add_answer'])
def add_answer_command(message):
    user_id = message.from_user.id
    # –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–æ—Å—Ç—É–ø, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ ID –∞–¥–º–∏–Ω–∞
    ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    if user_id not in ADMIN_IDS:
        bot.send_message(message.chat.id, "–¢–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã! üòé")
        return

    try:
        parts = message.text.split('|', 1)
        if len(parts) != 2:
            bot.send_message(message.chat.id, "–§–æ—Ä–º–∞—Ç: /add_answer <–≤–æ–ø—Ä–æ—Å> | <–æ—Ç–≤–µ—Ç>")
            return
        question, answer = parts[0].replace('/add_answer', '', 1).strip(), parts[1].strip()
        if add_response(question, answer):
            bot.send_message(message.chat.id, f"–û—Ç–≤–µ—Ç –¥–ª—è '{question}' –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. üòø")
    except Exception as e:
        logger.error(f"Error in add_answer: {str(e)}")
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    Thread(target=handle_message, args=(message,)).start()

# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.route(f'/{TELEGRAM_TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        abort(403)

if __name__ == '__main__':
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    webhook_url = f"https://asuna-3bfa.onrender.com/{TELEGRAM_TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook set: {webhook_url}")
    port = int(os.getenv('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
